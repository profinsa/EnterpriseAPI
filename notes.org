* how it works
  Application is made in MVC style.
** index.php 
   main entry point. All requests go through it.
   It is:
   + pages router
     you write index.php?page=GeneralLedger/chartOfAccounts
     router translated this to controllers/GeneralLedger/chartOfAccounts.php

   + settings loader
     from common.php
     for db settings and default user

   + db initializer
     start connetion to database before any controller
     end connection after controller and view finish them work

** page loading and rendering, step by step and life cycle
   First, you typing in browser: someaddress/index.php?page=index
   1 index.php load settings, connect to db
   2 index.php load controllers/index.php
   3 controllers/index.php checking user, if session expired or user unexists -> redirect to page=login
   4 controllers/index.php load user info from session, including user permissions
   5 controllers/index.php load translation model
   6 controllers/index.php load views/index.php and render that
   7 views/index.php uses translation model to translate interface and user for showing user info. Also it uses 
     user permissions to hide or to show some ui elements

** index.php?page=GeneralLedger/chartOfAccounts - how it works?
   Like a previous;
   controller -> controllers/GeneralLedger/chartOfAccounts.php
   model -> models/GeneralLedger/chartOfAccounts.php
   view -> views/GeneralLedger/chartOfAccounts.php

*** controller responds for
    * loading GeneralLedger/chartOfAccounts page, render that
    * handling ajax requests:
      - delete row from ledgerchartofaccounts
      - get row from leddgerchartofaccounts
      - update row in leddgerchartofaccounts

    it's pretty simple, only controlling, all request redirecting to view or model
*** view responds
    render all aspects of GeneralLedger/chartOfAccounts page
    Beside rendering common interface items like sidebar and top it contains three subpage which activated by mode param in address:
    - grid
      mode, in which view renders grid with buttons for print, edit, delete etc
    - view
      mode is activated if click on edit button in row
    - edit
      mode is activated if click on edit button in view mode

   view relies on model for all things(load data, editing, deleting) on controller and model
   it shoud be easy to customize.
   After copy and paste this code - need renaming many vars to point on right data fields
*** model responds
    - working with database(table ledgerchartofaccounts)
      loading many rows, one row, updating and deleting row
    - naming conversion like "GLBudgetPeriod1" => "GL Budget Period 1"
    - grouping fields like  "Main" => [ "GLAccountNumber", "GLAccountName"] or "Current" => ["GLCurrentYearPeriod1", "GLCurrentYearPeriod2"]
      this info used by view for rendering tabs and content in tabs
    - loading values for GLBalanceType and GLAccountType from ledgeraccounttypes and ledgerbalancetype


* how to clone screens
  Now each screen(GeneralLedger/chartOfAccounts, GeneralLedger/bankAccounts etc) it just model. Page is generated by that model.
  Models is located in /models.
  If you type in browser something like this index.php?page=grid&action=GeneralLedger/ledgerAccountGroup
  then model models/GeneralLedger/ledgerAccountGroup is loaded.
**  To create new screen need to make new model. 
  
    + copy exists model, like models/GeneralLedger/chartOfAccounts to models/SomeCategory/somepage.php.
    + edit model code(table name, columns, titles)
    + open in browser index.php?page=grid&action=SomeCategory/somepage


    Each model contains such information:
  - table name for working on
  - id field name which used for selecting and deleting specific row
  - column names for grid
  - column names grouped by categories for displaying tabs(Main, Current, Budget etc).
    description each column contains:
    + name
    + type input for editing,
    + default value
    + optional dataProviders to fill different dropdowns(like a choosing Currencies, GL Bank Account etc)
    + optional disable editing field 
    + dropdowns like CurrencyID
  - column names and their displayed names for translating
  - titles for dashboard and breadcrumb
    
  After model is filled - screen is done.
  All screens are rendered by one view(views/gridView). For some screens view must be adopted.
  

* aspxconvertor how use?
  Convertor is works in two modes:
  + converting whole directory
    It trying search all *List.aspx files in directory which path passed as argument
    It extracts table name, key fields and grid column from that files.
    Then it extracts columns from tables and create model for screen and model for menu.
  + converting single page
    It trying read file which path passed as argument
    It extracts table name, key fields and grid column from that files.
    Then it extracts columns from tables and create model for screen and model for menu.
    
** What does the convertor do?
   + extracts page name, table name, key fields and grid columns from .aspx file
   + extracts column names from table description directly from mysql
   + creates screen model file(php file, which contains class) and write to him:
     - table name
     - grid columns
     - dashboard and breadcrumb titles
     - key fields
     - fields grouped by categories(only Main on start, but we can split fields on many groups)
       field in group has name, inputType(text, dropdown, datepicker etc) and default value
     - columnNames array which contains pairs:
       tablefieldname=>translatedfieldname

** how it use?
   in command line mode change directory to integralx/tools
   node convertor.js yourpath/EnterpriseASP/EnterpriseASPAR/OrderProcessing
   for converting directory
   or
   node convertor.js yourpath/EnterpriseASP/EnterpriseASPAR/OrderProcessing/ContractsHeaderList.aspx
   for converting one file
   
   models will appear as integralx/tools/models/ContractsHeader.php
   Also menu model(file which contains items from sidebar) will be created as integralx/tools/models/menuCategories.php

   Then we need put screen models like ContractsHeader.php to somewhere in integralx/models
   For example and default(as used in generated menuCategories) put it as integralx/models/OrderProcessing/ContractsHeader.php

   Then we need copy text from integralx/tools/models/menuCategories.php to end of integralx/models/menuCategories.php

   After that generated screen or screens can be accesssed from browser
