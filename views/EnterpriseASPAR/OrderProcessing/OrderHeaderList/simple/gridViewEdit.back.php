<!-- 
     Name of Page: Simple Order like form view

     Method: this view for Simple Order like form in the edit mode

     Date created: autogenerated

     Use: this view used for view mode. Renders all ui interface including Detail actions but only in the edit mode

     Input parameters:
     $scope: common information object
     $data : model

     Output parameters:
     html
     
     Called from:
     Grid Controller

     Calls:
     model

     Last Modified: 08/03/2017
     Last Modified by: Zaharov Nikita
   -->

<?php
$GLOBALS["dialogChooserTypes"] = [];
$GLOBALS["dialogChooserInputs"] = [];

function makeId($id){
    return preg_replace("/[\s\$]+/", "", $id);
}
function formatValue($data, $fieldsDefinition, $values, $key, $value){
    switch($fieldsDefinition[$key]["inputType"]){
      case "checkbox" :
          echo "<input class=\"grid-checkbox\" type=\"checkbox\"  ". ($value ? "checked" : "") . " disabled />";
          break;
      case "timestamp" :
      case "datetime" :
          echo date("m/d/y", strtotime($value));
          break;
      case "dialogChooser":
      case "text":
      case "dropdown":
          if(key_exists("formatFunction", $fieldsDefinition[$key])){
            $formatFunction = $fieldsDefinition[$key]["formatFunction"];
            echo $data->$formatFunction($values, "editCategories", $key, $value, false);
          }
          else
            echo formatField($fieldsDefinition[$key], $value);
          break;
    }
}

function renderInput($ascope, $data, $category, $item, $key, $value){
    switch($data->editCategories[$category][$key]["inputType"]){
	case "text" :
            //renders text input with label
            echo "<input style=\"display:inline\" type=\"text\" id=\"". $key ."\" name=\"" .  $key. "\" onchange=\"fillSameInputs('" . $value . "', '" . $key . "', this);\" class=\"form-control\" value=\"";
            if(key_exists("formatFunction", $data->editCategories[$category][$key])){
		$formatFunction = $data->editCategories[$category][$key]["formatFunction"];
		echo $data->$formatFunction($item, "editCategories", $key, $value, false);
            }
            else
		echo formatField($data->editCategories[$category][$key], $value);

            echo"\" " . ( (key_exists("disabledEdit", $data->editCategories[$category][$key]) && $ascope["mode"] == "edit")  || (key_exists("disabledNew", $data->editCategories[$category][$key]) && $ascope["mode"] == "new") ? "readonly" : "")
               .">";
            break;
	    
	case "datetime" :
            //renders text input with label
            echo "<input type=\"text\" id=\"". $key ."\" name=\"" .  $key. "\" class=\"form-control fdatetime\" value=\"" . ($value == 'now' || $value == "0000-00-00 00:00:00" || $value == "CURRENT_TIMESTAMP"? date("m/d/y") : date("m/d/y", strtotime($value))) ."\" " .
		 ( (key_exists("disabledEdit", $data->editCategories[$category][$key]) && $ascope["mode"] == "edit")  || (key_exists("disabledNew", $data->editCategories[$category][$key]) && $ascope["mode"] == "new") ? "readonly" : "")
		.">";
            break;

	case "checkbox" :
            //renders checkbox input with label
            echo "<input type=\"hidden\" name=\"" . $key . "\" value=\"0\"/>";
            echo "<input class=\"grid-checkbox\" type=\"checkbox\" id=\"". $key ."\" name=\"" .  $key. "\" class=\"form-control\" value=\"1\" " . ($value ? "checked" : "") ." " .
		 ( (key_exists("disabledEdit", $data->editCategories[$category][$key]) && $ascope["mode"] == "edit") || (key_exists("disabledNew", $data->editCategories[$category][$key]) && $ascope["mode"] == "new") ? "disabled" : "")
		.">";
            break;
	    
	case "dialogChooser":
            $dataProvider = $data->editCategories[$category][$key]["dataProvider"];
            if(!key_exists($dataProvider, $GLOBALS["dialogChooserTypes"]))
		$GLOBALS["dialogChooserTypes"][$dataProvider] = "hophop";
            $GLOBALS["dialogChooserInputs"][$key] = $dataProvider;
            echo "<input type=\"text\" id=\"". $key ."\" name=\"" .  $key. "\" class=\"form-control\" value=\"$value\">";
            break;

	case "dropdown" :
            //renders select with available values as dropdowns with label
            echo "<select class=\"form-control\" name=\"" . $key . "\" id=\"" . $key . "\">";
            $method = $data->editCategories[$category][$key]["dataProvider"];
            if(key_exists("dataProviderArgs", $data->editCategories[$category][$key])){
		$args = [];
		foreach($data->editCategories[$category][$key]["dataProviderArgs"] as $argname)
                    $args[$argname] = $item[$argname];
		$types = $data->$method($args);
            }
            else
		$types = $data->$method();
            if($value)
		echo "<option value=\"" . $value . "\">" . (key_exists($value, $types) ? $types[$value]["title"] : $value) . "</option>";
            else
		echo "<option></option>";

            foreach($types as $type)
		if(!$value || $type["value"] != $value)
                    echo "<option value=\"" . $type["value"] . "\">" . $type["title"] . "</option>";
            echo"</select>";
            break;
    }
}

function renderRow($translation, $ascope, $data, $category, $item, $key, $value){
    $translatedFieldName = $translation->translateLabel(key_exists($key, $data->columnNames) ? $data->columnNames[$key] : $key);
    echo "<div class=\"form-group col-md-12 col-xs-12\"><label class=\"col-md-6 col-xs-6\" for=\"" . $key ."\">" . $translatedFieldName . "</span></label><div class=\"style-5 col-md-6 col-xs-6\">";
    renderInput($ascope, $data, $category, $item, $key, $value);
    echo "</div></div>";
}

function renderViewRow($translation, $data, $fieldsDefinition, $values, $key, $value){
    echo "<tr style=\"padding: 5px\"><td style=\"padding: 5px\"><b>" . $translation->translateLabel(key_exists($key, $data->columnNames) ? $data->columnNames[$key] : $key) . ":</b></td><td style=\"word-wrap: break-word; padding: 5px\">";
    echo formatValue($data, $fieldsDefinition, $values, $key, $value);
    echo "</td></tr>";
}

function makeTableItems($values, $fieldsDefinition){
    $leftItems = [];
    $rightItems = [];
    
    $itemsHalf = 0;
    $itemsCount = 0;
    foreach($values as $key =>$value){
	if(key_exists($key, $fieldsDefinition))
            $itemsCount++;
    }
    $itemsHalf = $itemsCount/2;

    $itemsCount = 0;
    foreach($values as $key =>$value){
	if(key_exists($key, $fieldsDefinition)){
            if($itemsCount < $itemsHalf)
		$leftItems[$key] = $value;
            else 
		$rightItems[$key] = $value;
            $itemsCount++;
	}
    }
    return [
	"leftItems" => $leftItems,
	"rightItems" => $rightItems
    ];
}
?>
<div id="row_editor" style="font-size: 11pt">
    <?php
    require __DIR__ . '/../../../../breadcrumbs.php';
    ?>

    <form id="itemData" class="form-material form-horizontal m-t-30 col-md-12 col-xs-12">
	<?php echo csrf_field(); ?>
	<input type="hidden" name="id" value="<?php echo $ascope["item"]; ?>" />
	<input type="hidden" name="category" value="<?php echo $ascope["category"]; ?>" />

	<?php
        $headerItem = $ascope["mode"] == 'edit' ? $data->getEditItem($ascope["item"], "...fields") :
					 $data->getNewItem($ascope["item"], "...fields" );
	?>
	<div class="row">
        <div class="col-md-4" style="float: right">
            <?php if(key_exists("showShipping", $data->simpleInterface) && $data->simpleInterface["showShipping"]): ?>
            <div class="row">
                <b>
                <span style="margin-top: 0 !important;margin-bottom: 3px" class="header col-md-12 col-xs-12">Ship to</span>
                </b>
            </div>
            <div style="padding: 5px !important;">
                <div style="padding: 0px !important;">
                    <!--<tbody>-->
                        <?php
                        $item = $ascope["mode"] == 'edit' ? $data->getEditItem($ascope["item"], "Shipping") : $data->getNewItem($ascope["item"], "Shipping");
                        $tableCategories = $data->editCategories["Shipping"];
                        $tableItems = makeTableItems($item, $tableCategories);
                        $items = $item;
                        $category = "Shipping";
                        ?>
                        <?php 
                        foreach($tableItems["leftItems"] as $key =>$value)
                        renderRow($translation, $ascope, $data, $category, $items, $key, $value);
                        ?>
                        <?php 
                        foreach($tableItems["rightItems"] as $key =>$value)
                        renderRow($translation, $ascope, $data, $category, $items, $key, $value);
                        ?>
                    <!--</tbody>-->
                </div>
            </div>
            <?php endif; ?>
        </div>

        <div class="col-md-4"  style="float: right">
            <div class="row">
                <b>
                <span style="margin-top: 0 !important; margin-bottom: 3px" class="header col-md-12 col-xs-12">
                    <?php echo $data->simpleInterface["customerTitle"]; ?>
                </span>
                </b>
            </div>

            <?php if($item = $ascope["mode"] == 'new'): ?>
                <?php renderInput($ascope, $data, "...fields", $headerItem, "CustomerID", $headerItem["CustomerID"]); ?>
            <?php else: ?>
		<div class="style-5" style="padding: 5px;">
                    <div>
			<table>
			    <tbody>
				<?php
				$item = $ascope["mode"] == 'edit' ? $data->getEditItem($ascope["item"], "Customer") : $data->getNewItem($ascope["item"], "Customer");
				$customerInfo = $data->getCustomerInfo($headerItem[property_exists($data, "customerField") ? $data->customerField : "CustomerID"]);
				$tableItems = makeTableItems($customerInfo, $data->simpleInterface["customerFields"]);
				$tableCategories = $data->customerFields;
				$items = $customerInfo;
				?>
				<?php 
				foreach($tableItems["leftItems"] as $key =>$value)
				    renderViewRow($translation, $data, $tableCategories, $items, $key, $value);
				?>
				<?php 
				foreach($tableItems["rightItems"] as $key =>$value)
				    renderViewRow($translation, $data, $tableCategories, $items, $key, $value);
				?>
			    </tbody>
			</table>
                    </div>
		</div>
            <?php endif; ?>
        </div>
        <div class="col-md-2" style="float: right">
            <?php foreach($data->simpleInterface["aboutOrder"] as $key=>$value): ?>
		<div class="row">
                    <div class="style-5">
			<label for="<?php echo $translation->translateLabel($key); ?>">
                            <?php echo $translation->translateLabel($key); ?>
			</label>
			<?php renderInput($ascope, $data, "...fields", $headerItem, $value, $headerItem[$value]); ?>
                    </div>
		</div>
            <?php endforeach; ?>
        </div>
    </div>

    <div class="row" style="margin-top: 50px">
        <?php foreach($data->simpleInterface["aboutPurchase"] as $key=>$value): ?>
            <div class="style-5 col-md-2 pull-right">
                <label for="<?php echo $translation->translateLabel($key); ?>">
                    <?php echo $translation->translateLabel($key); ?>
                </label>
                <?php renderInput($ascope, $data, "...fields", $headerItem, $value, $headerItem[$value]); ?>
            </div>
        <?php endforeach; ?>
    </div>

    <!-- Detail table -->
    <div class="row">
        <div class="table-responsive order-entry-header col-md-12 col-xs-12" style="margin-top:20px;">
            <?php 
            $rows = $data->getDetail(key_exists("keyFields",$data->detailTable) ? $headerItem[$data->detailTable["keyFields"][0]] :$headerItem["OrderNumber"]);
            $gridFields = $data->embeddedgridFields;
            $embeddedgridContext = $headerItem;
            function makeRowActions($public_prefix, $linksMaker, $data, $ascope, $row, $embeddedgridContext){
		$user = $GLOBALS["user"];
		$keyString = $user["CompanyID"] . "__" . $user["DivisionID"] . "__" . $user["DepartmentID"] . "__" . $row[$data->detailTable["keyFields"][0]] . "__" . $row[$data->detailTable["keyFields"][1]];
		echo "<a href=\"" . $linksMaker->makeEmbeddedgridItemEditLink($data->detailTable["viewPath"], $ascope["path"], $keyString, $ascope["item"]);
		echo "\"><span class=\"grid-action-button glyphicon glyphicon-edit\" aria-hidden=\"true\"></span></a>";
		echo "<a href=\"javascript:;\" onclick=\"orderDetailDelete('$keyString')\"><span class=\"grid-action-button glyphicon glyphicon-remove\" aria-hidden=\"true\"></span></a>";
            }
            require __DIR__ . "/../../../../embeddedgrid.php"; 
            ?>
        </div>
        <div class="subgrid-buttons row col-md-1">
            <?php if(!key_exists("disableNew", $data->detailTable) && $ascope["mode"] != "new"): ?>
		<a class="btn btn-info" href="<?php echo $linksMaker->makeEmbeddedgridItemNewLink($data->detailTable["viewPath"], $ascope["path"], "new", $ascope["item"]) . "&{$data->detailTable["newKeyField"]}={$embeddedgridContext[$data->detailTable["newKeyField"]]}" ?>">
                    <?php echo $translation->translateLabel("New"); ?>
		</a>
            <?php endif; ?>
        </div>
    </div>
    
    <script>
     datatableInitialized = true;
     var table = $('#example23').DataTable( {
         dom : "<'subgrid-table-header row'<'col-sm-6'l><'col-sm-6'f>><'subgrid-table-content row't><'subgrid-table-footer row'<'col-sm-4'i><'col-sm-7'p>>"
     });
     setTimeout(function(){
         var buttons = $('.subgrid-buttons');
         var tableFooter = $('.subgrid-table-footer');
         tableFooter.prepend(buttons);
     },300);
    </script>

    <div class="row" style="margin-top:80px; position: relative">
        <div class="col-md-6 col-xs-12" style="position: absolute; right: 0; bottom: 0; text-align: right">
            <table class="order-entry-balance-table col-md-12 col-xs-12">
		<tbody>
                    <?php foreach($data->simpleInterface["totalFields"] as $key=>$value): ?>
			<tr>
			    <td>
				<b><?php echo $translation->translateLabel($key); ?>: </b>
			    </td>
			    <td>
				<?php if($key != "Tax" && $key != "Total"): ?>
				    <?php renderInput($ascope, $data, "...fields", $headerItem, $value, $headerItem[$value]); ?>
				<?php else: ?>
				    <div class="pull-right"><?php echo formatValue($data, $data->editCategories['...fields'], $headerItem, $value, $headerItem[$value]); ?></div>
				<?php endif; ?>
			    </td>
			</tr>
                    <?php endforeach; ?>
		</tbody>
            </table>
        </div>
    </div>

    <?php
    if(file_exists(__DIR__ . "/../../../../" . $PartsPath . "editFooter.php"))
        require __DIR__ . "/../../../../" . $PartsPath . "editFooter.php";
    if(file_exists(__DIR__ . "/../../../../" . $PartsPath . "vieweditFooter.php"))
        require __DIR__ . "/../../../../" . $PartsPath . "vieweditFooter.php";
    ?>

    <div class="row" style="margin-top:80px; position: relative">
        <div class="col-md-5 col-xs-12;" style="position: absolute; left: 0; bottom: 0;">
            <?php
            $item = $ascope["mode"] == 'edit' ? $data->getEditItem($ascope["item"], "Memos") : $data->getNewItem($ascope["item"], "Memos");
            $tableCategories = $data->editCategories["Memos"];
            $tableItems = makeTableItems($item, $tableCategories);
            $items = $item;
            $category = "Memos";
            ?>
            <div class="form-inline" style="width: 100%">
                <div class="style-5 form-group"  style="width: 100%">
                    <label for="memo">
                        <?php echo $translation->translateLabel("Memo"); ?>
                    </label>
                    <?php renderInput($ascope, $data, $category, $item, "HeaderMemo1", $tableItems["leftItems"]["HeaderMemo1"]); ?>
                </div>
            </div>
        </div>
        <div class="col-md-7 col-xs-12" style="position: absolute; right: 0; bottom: 0; text-align: right">
            <!--
                 renders buttons translated Save and Cancel using translation model
               -->
            <?php if($security->can("update")): ?>
                <a class="btn btn-info" onclick="<?php echo ($ascope["mode"] == "edit" ? "saveItem()" : "createItem()"); ?>">
                    <?php echo $translation->translateLabel("Save"); ?>
                </a>
                <?php 
                if(file_exists(__DIR__ . "/../../../../" . $PartsPath . "editActions.php"))
                    require __DIR__ . "/../../../../" . $PartsPath . "editActions.php";
                if(file_exists(__DIR__ . "/../../../../" . $PartsPath . "vieweditActions.php"))
                    require __DIR__ . "/../../../../" . $PartsPath . "vieweditActions.php";
                ?>
            <?php endif; ?>
            <a class="btn btn-info" href="<?php echo $ascope["mode"] != "new" ? $linksMaker->makeGridItemView($ascope["path"], $ascope["item"])  : $linksMaker->makeGridItemViewCancel($ascope["path"]) ; ?>">
                <?php echo $translation->translateLabel("Cancel"); ?>
            </a>
        </div>
    </div>
    </form>

    <script>
     function fillSameInputs(value, key, event) {
         var elements = $('input[name=' + key + ']');
         var elementsKeys = Object.keys(elements);


         for (var k = 0; k < elementsKeys.length; k++) {
             $(elements[elementsKeys[k]]).val(event.value);
         }
     }

     function validateForm(itemData) {
         var itemDataArray = itemData.serializeArray();

         var categories = <?php echo json_encode($data->editCategories); ?>;
         var categoriesKeys = Object.keys(categories);
         var columnNames = <?php echo json_encode($data->columnNames); ?>;
         var validationError = false;
         var validationErrorMessage = '';
         var isAlert = false;

         function getDbObject(key) {
             for (var i = 0; i < categoriesKeys.length; i++) {
                 if (categories[categoriesKeys[i]].hasOwnProperty(key)) {
                     return categories[categoriesKeys[i]][key];
                 }
             }

             return null;
         }

         function isNumeric(value) {
             var re = /^-{0,1}\d*\.{0,1}\d+$/;
             return (re.test(value));
         }

         function isDecimal(value) {
             var re = /^-{0,1}\d*\.{0,1}\d+$/;
             return (re.test(value.replace(/,/g,'')));
         }

         for (var i = 0; i < itemDataArray.length; i++) {
             if ((itemDataArray[i].name !== 'category') && (itemDataArray[i].name !== 'id')) {
                 var dataObject = getDbObject(itemDataArray[i].name);

                 if (dataObject) {
                     var dataType = dataObject.dbType.replace(/\(.*/,'');
                     var dataLength;
                     var re = /\((.*)\)/;
                     
                     if (dataType !== 'datatime' && dataType !== 'timestamp') {
                         if (dataObject.required && !itemDataArray[i].value) {
                             validationError = true;
                             validationErrorMessage = 'cannot be empty.';
                             $('#' + itemDataArray[i].name).css('border', '1px solid red');
                         } else {
                             $('#' + itemDataArray[i].name).css('border', 'none');
                             switch (dataType) {
                                 case 'decimal':
                                     if (itemDataArray[i].value && !isDecimal(itemDataArray[i].value)) {
                                         var elements = $('input[name=' + itemDataArray[i].name + ']');
                                         var elementsKeys = Object.keys(elements);


                                         for (var k = 0; k < elementsKeys.length; k++) {
                                             $(elements[elementsKeys[k]]).css('border', '1px solid red');
                                         }
                                         validationError = true;
                                         validationErrorMessage = 'must contain a number.';
                                     }
                                     break;
				 case 'smallint':
                                 case 'bigint':
                                 case 'int':
                                 case 'float':
                                     if (itemDataArray[i].value && !isNumeric(itemDataArray[i].value)) {
                                         var elements = $('input[name=' + itemDataArray[i].name + ']');
                                         var elementsKeys = Object.keys(elements);


                                         for (var k = 0; k < elementsKeys.length; k++) {
                                             $(elements[elementsKeys[k]]).css('border', '1px solid red');
                                         }
                                         validationError = true;
                                         validationErrorMessage = 'must contain a number.';
                                     }
                                     break;
                                 case 'char':
                                     if (itemDataArray[i].value.length > 1) {
                                         var elements = $('input[name=' + itemDataArray[i].name + ']');
                                         var elementsKeys = Object.keys(elements);


                                         for (var k = 0; k < elementsKeys.length; k++) {
                                             $(elements[elementsKeys[k]]).css('border', '1px solid red');
                                         }
                                         validationError = true;
                                         validationErrorMessage = 'cannot contain more than 1 character.';
                                     }
                                     break;
                                 case 'varchar':
                                     dataLength = dataObject.dbType.match(re)[1];

                                     if (itemDataArray[i].value.length > dataLength) {
                                         var elements = $('input[name=' + itemDataArray[i].name + ']');
                                         var elementsKeys = Object.keys(elements);


                                         for (var k = 0; k < elementsKeys.length; k++) {
                                             $(elements[elementsKeys[k]]).css('border', '1px solid red');
                                         }
                                         validationError = true;
                                         validationErrorMessage = 'cannot contain more than ' + dataLength + ' character(s).';
                                     }
                                     break;
                                 default:
                                     break;
                             }
                         }
                     }

                     if (validationError && !isAlert) {
                         translatedFieldName = columnNames.hasOwnProperty(itemDataArray[i].name) ? columnNames[itemDataArray[i].name] : itemDataArray[i].name;
                         isAlert = true;
                         alert(translatedFieldName + ' field ' + validationErrorMessage);
                     }
                 } else {
                     //todo error handling
                 }
             }
         }

         return !validationError;
     }
     
     //handler of save button if we in new mode. Just doing XHR request to save data
     function createItem(){
         var itemData = $("#itemData");

         if (validateForm(itemData)) {
             $.post("<?php echo $linksMaker->makeGridItemNew($ascope["path"]); ?>", itemData.serialize(), null, 'json')
              .success(function(data) {
                  console.log('ok');
                  window.location = "<?php echo $linksMaker->makeGridItemViewCancel($ascope["path"]); ?>";
              })
              .error(function(err){
                  console.log('wrong');
              });
         }
     }
     //handler of save button if we in edit mode. Just doing XHR request to save data
     function saveItem(){
         var itemData = $("#itemData");
         if (validateForm(itemData)) {
             $.post("<?php echo $linksMaker->makeGridItemSave($ascope["path"]); ?>", itemData.serialize(), null, 'json')
              .success(function(data) {
                  window.location = "<?php echo $linksMaker->makeGridItemView($ascope["path"], $ascope["item"]); ?>";
              })
              .error(function(err){
                  console.log('wrong');
              });
         }
     }

     //handler delete button from rows. Just doing XHR request to delete item and redirect to grid if success
     function orderDetailDelete(item){
	 if(confirm("Are you sure?")){
             $.post("<?php echo $linksMaker->makeEmbeddedgridItemDeleteLink($ascope["path"], "detailDelete", $ascope["item"]);?>" + item, {})
              .success(function(data) {
		  $.post(localStorage.getItem("autorecalcLink"), JSON.parse(localStorage.getItem("autorecalcData")))
		   .success(function(data) {
                       onlocation(window.location);
		   })
		   .error(function(err){
                       onlocation(window.location);
		   });
              })
              .error(function(err){
		  console.log('wrong');
              });
	 }
     }
    </script>
</div>

<?php require __DIR__ . "/../../../../dialogChooser.php"; ?>
