-- Stored procedure definition script BankTransaction_Control for MySQL
-- Generated by (c) Ispirer SQLWays 4.0 Build 219 Licensed to STFB
-- Timestamp: Tue Jul 28 16:20:00 2015

DELIMITER //
DROP FUNCTION IF EXISTS BankTransaction_Control;
//
/* The procedure was converted to function because it contains the RETURN statement with expression*/
CREATE FUNCTION BankTransaction_Control(v_CompanyID NATIONAL VARCHAR(36), 
	v_DivisionID NATIONAL VARCHAR(36),
	v_DepartmentID NATIONAL VARCHAR(36),
	v_BankTransactionID NATIONAL VARCHAR(36))
RETURNS INT
BEGIN


















/*
Name of stored procedure: BankTransaction_Control
Method: 
	This stored procedure would be called after a bank transactions is entered, 
	and would call the approiate BankTransaction Stored Procedure 
	(Deposit, Transfer, Withdrawal, etc) for posting that transaction

Date Created: EDE - 07/28/2015

Input Parameters:

	@CompanyID NVARCHAR(36)		 - the ID of the company
	@DivisionID NVARCHAR(36)	 - the ID of the division
	@DepartmentID NVARCHAR(36)	 - the ID of the department
	@BankTransactionID NVARCHAR(36)	 - the number posted document

Output Parameters:

	NONE

Called From:

	NONE

Calls:

	Bank_PostDeposit, Bank_PostTransfer, Bank_PostWithdrawal, Error_InsertError, Error_InsertErrorDetail

Last Modified: 

Last Modified By: 

Revision History: 

*/

   DECLARE v_ReturnStatus SMALLINT;
   DECLARE v_ErrorMessage NATIONAL VARCHAR(200);
   DECLARE v_Success BOOLEAN;
   DECLARE v_DocumentTypeID NATIONAL VARCHAR(36);
   DECLARE v_Posted BOOLEAN;

-- get the invoice type to know what procedure to call for posting
   DECLARE v_ErrorID INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   select   TransactionType, Posted INTO v_DocumentTypeID,v_Posted FROM
   BankTransactions WHERE
   CompanyID = v_CompanyID AND
   DivisionID = v_DivisionID AND
   DepartmentID = v_DepartmentID AND
   BankTransactionID = v_BankTransactionID;

   IF v_Posted = 1 then

      RETURN 0;
   end if;

   IF LOWER(v_DocumentTypeID) = LOWER('Deposit') then
-- call bank deposit posting procedure

      SET @SWV_Error = 0;
      SET v_ReturnStatus = Bank_PostDeposit2(v_CompanyID,v_DivisionID,v_DepartmentID,v_BankTransactionID,v_Success);
	-- An error occured, go to the error handler
      IF @SWV_Error <> 0 OR v_ReturnStatus = -1 OR v_Success <> 1 then
	
         SET v_ErrorMessage = 'Bank_PostDeposit call failed';
         CALL Error_InsertError(v_CompanyID,v_DivisionID,v_DepartmentID,'BankTransaction_Control',v_ErrorMessage,
         v_ErrorID);
         CALL Error_InsertErrorDetail(v_CompanyID,v_DivisionID,v_DepartmentID,v_ErrorID,'BankTransactionID',
         v_BankTransactionID);
         RETURN -1;
      end if;
   ELSE 
      IF LOWER(v_DocumentTypeID) = LOWER('Transfer') then
-- call bank transfer posting procedure

         SET @SWV_Error = 0;
         CALL Bank_PostTransfer(v_CompanyID,v_DivisionID,v_DepartmentID,v_BankTransactionID,v_Success, v_ReturnStatus);
	-- An error occured, go to the error handler
         IF @SWV_Error <> 0 OR v_ReturnStatus = -1 OR v_Success <> 1 then
	
            SET v_ErrorMessage = 'Bank_PostTransfer call failed';
            CALL Error_InsertError(v_CompanyID,v_DivisionID,v_DepartmentID,'BankTransaction_Control',v_ErrorMessage,
            v_ErrorID);
            CALL Error_InsertErrorDetail(v_CompanyID,v_DivisionID,v_DepartmentID,v_ErrorID,'BankTransactionID',
            v_BankTransactionID);
            RETURN -1;
         end if;
      ELSE 
         IF LOWER(v_DocumentTypeID) = LOWER('Withdrawal') then
-- call bank withdrawal posting procedure

            SET @SWV_Error = 0;
            SET v_ReturnStatus = Bank_PostWithdrawal2(v_CompanyID,v_DivisionID,v_DepartmentID,v_BankTransactionID,v_Success);
	-- An error occured, go to the error handler	
            IF @SWV_Error <> 0 OR v_ReturnStatus = -1 OR v_Success <> 1 then
	
               SET v_ErrorMessage = 'Bank_PostWithdrawal call failed';
               CALL Error_InsertError(v_CompanyID,v_DivisionID,v_DepartmentID,'BankTransaction_Control',v_ErrorMessage,
               v_ErrorID);
               CALL Error_InsertErrorDetail(v_CompanyID,v_DivisionID,v_DepartmentID,v_ErrorID,'BankTransactionID',
               v_BankTransactionID);
               RETURN -1;
            end if;
         ELSE 
            IF LOWER(v_DocumentTypeID) = LOWER('Adjustment') then
-- call bank withdrawal posting procedure

               SET @SWV_Error = 0;
               SET v_ReturnStatus = Bank_PostAdjustment2(v_CompanyID,v_DivisionID,v_DepartmentID,v_BankTransactionID,v_Success);
	-- An error occured, go to the error handler	
               IF @SWV_Error <> 0 OR v_ReturnStatus = -1 OR v_Success <> 1 then
	
                  SET v_ErrorMessage = 'Bank_PostAdjustment call failed';
                  CALL Error_InsertError(v_CompanyID,v_DivisionID,v_DepartmentID,'BankTransaction_Control',v_ErrorMessage,
                  v_ErrorID);
                  CALL Error_InsertErrorDetail(v_CompanyID,v_DivisionID,v_DepartmentID,v_ErrorID,'BankTransactionID',
                  v_BankTransactionID);
                  RETURN -1;
               end if;
            ELSE 
               IF LOWER(v_DocumentTypeID) = LOWER('Service Fee') then
-- call bank withdrawal posting procedure

                  SET @SWV_Error = 0;
                  SET v_ReturnStatus = Bank_PostServiceFee2(v_CompanyID,v_DivisionID,v_DepartmentID,v_BankTransactionID,v_Success);
	-- An error occured, go to the error handler	
                  IF @SWV_Error <> 0 OR v_ReturnStatus = -1 OR v_Success <> 1 then
	
                     SET v_ErrorMessage = 'Bank_PostServiceFee call failed';
                     CALL Error_InsertError(v_CompanyID,v_DivisionID,v_DepartmentID,'BankTransaction_Control',v_ErrorMessage,
                     v_ErrorID);
                     CALL Error_InsertErrorDetail(v_CompanyID,v_DivisionID,v_DepartmentID,v_ErrorID,'BankTransactionID',
                     v_BankTransactionID);
                     RETURN -1;
                  end if;
               ELSE 
                  IF LOWER(v_DocumentTypeID) = LOWER('Check') then
-- call bank withdrawal posting procedure

                     SET @SWV_Error = 0;
                     SET v_ReturnStatus = Bank_PostCheck2(v_CompanyID,v_DivisionID,v_DepartmentID,v_BankTransactionID,v_Success);
	-- An error occured, go to the error handler	
                     IF @SWV_Error <> 0 OR v_ReturnStatus = -1 OR v_Success <> 1 then
	
                        SET v_ErrorMessage = 'Bank_PostCheck call failed';
                        CALL Error_InsertError(v_CompanyID,v_DivisionID,v_DepartmentID,'BankTransaction_Control',v_ErrorMessage,
                        v_ErrorID);
                        CALL Error_InsertErrorDetail(v_CompanyID,v_DivisionID,v_DepartmentID,v_ErrorID,'BankTransactionID',
                        v_BankTransactionID);
                        RETURN -1;
                     end if;
                  ELSE 
                     IF LOWER(v_DocumentTypeID) = LOWER('Outbound Wire') then
-- call bank withdrawal posting procedure

                        SET @SWV_Error = 0;
                        SET v_ReturnStatus = Bank_PostOutboundWire2(v_CompanyID,v_DivisionID,v_DepartmentID,v_BankTransactionID,v_Success);
	-- An error occured, go to the error handler	
                        IF @SWV_Error <> 0 OR v_ReturnStatus = -1 OR v_Success <> 1 then
	
                           SET v_ErrorMessage = 'Bank_PostOutboundWire call failed';
                           CALL Error_InsertError(v_CompanyID,v_DivisionID,v_DepartmentID,'BankTransaction_Control',v_ErrorMessage,
                           v_ErrorID);
                           CALL Error_InsertErrorDetail(v_CompanyID,v_DivisionID,v_DepartmentID,v_ErrorID,'BankTransactionID',
                           v_BankTransactionID);
                           RETURN -1;
                        end if;
                     ELSE 
                        IF LOWER(v_DocumentTypeID) = LOWER('Inbound Wire') then
-- call bank withdrawal posting procedure

                           SET @SWV_Error = 0;
                           SET v_ReturnStatus = Bank_PostInboundWire2(v_CompanyID,v_DivisionID,v_DepartmentID,v_BankTransactionID,v_Success);
	-- An error occured, go to the error handler	
                           IF @SWV_Error <> 0 OR v_ReturnStatus = -1 OR v_Success <> 1 then
	
                              SET v_ErrorMessage = 'Bank_PostInboundWire call failed';
                              CALL Error_InsertError(v_CompanyID,v_DivisionID,v_DepartmentID,'BankTransaction_Control',v_ErrorMessage,
                              v_ErrorID);
                              CALL Error_InsertErrorDetail(v_CompanyID,v_DivisionID,v_DepartmentID,v_ErrorID,'BankTransactionID',
                              v_BankTransactionID);
                              RETURN -1;
                           end if;
                        ELSE
                           SET @SWV_Error = 0;
                           SET v_ReturnStatus = Bank_PostDeposit2(v_CompanyID,v_DivisionID,v_DepartmentID,v_BankTransactionID,v_Success);
	-- An error occured, go to the error handler
                           IF @SWV_Error <> 0 OR v_ReturnStatus = -1 OR v_Success <> 1 then
	
                              SET v_ErrorMessage = 'Bank_PostDeposit call failed';
                              CALL Error_InsertError(v_CompanyID,v_DivisionID,v_DepartmentID,'BankTransaction_Control',v_ErrorMessage,
                              v_ErrorID);
                              CALL Error_InsertErrorDetail(v_CompanyID,v_DivisionID,v_DepartmentID,v_ErrorID,'BankTransactionID',
                              v_BankTransactionID);
                              RETURN -1;
                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
   end if;


-- everyting is OK
   RETURN 0;

-- if an error occured in the procedure this code will be executed
-- The information about the error are entered in the ErrrorLog and ErrorLogDetail tables.
-- The company, division, department informations are inserted in the ErrorLog table
-- along with information about the name of the procedure and the error message and an errorID is obtained.
-- The aditional information about other procedure parameters are inserted along with the errorID in the ErrorLogDetail table
-- (about the other parameters the name and the value are inserted).

-- the error handler
   CALL Error_InsertError(v_CompanyID,v_DivisionID,v_DepartmentID,'BankTransaction_Control',v_ErrorMessage,
   v_ErrorID);

   CALL Error_InsertErrorDetail(v_CompanyID,v_DivisionID,v_DepartmentID,v_ErrorID,'BankTransactionID',
   v_BankTransactionID);

   RETURN -1;
END;
















//

DELIMITER ;
